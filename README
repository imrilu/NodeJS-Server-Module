rubi1993
imrilu

=============================
=      File description     =
=============================
1) Sjavac.java : the Main method is found here.
2)block.java : block has Scope object and uses SyntaxVerifier
3)Methods.java : represents Method, has list of required paramaters and the method name
4)Scope.java :  every block have scope(as mentioned before) every scope has list of variables(that belongs
 to it)
5)Svar.java:represents one variable in the program.
6)SyntaxVerifier:performs test and modifications on the program lines (method calls and
declaration\assignment line)
7)README: This file.
=============================
=          design           =
=============================
we decided to split the program to it's responsible's platform,keeping in mind trying to keep the
hierarchical logic.
so we decided to have Sjavac that runs the program , handling all of the class in it,when SyntaxVerifier
is responsible of "reading" and concluding the correction of the Sjavac files,
and block,methods,scopes,svar are just responsible of creating the program structure.


=============================
=  Implementation details   =
=============================
We implemented the program keeping in mind that we need to process code obtain the structure of the
program before we make further actions on the text lines, meaning - we splited the code according to the
blocks structures,and then we went throw all of the blocks (recursively) until we proceed all of the lines
 , each by it's time , and we handled every type of line accordingly,in farther explanation: if we
 recognized method call we acted differently then declaration or assignment line.

=============================
=    Answers to questions   =
=============================

1.how you handled s-Java code errors in this exercise, and why you chose to do so:
==================================================================================
i decided not to create two different types of exceptions mainly because my program is proceed in a
certain order that separates between IOExceptions(msg type 2) and wrong file Exceptions (msg type 1)
so therefore we use only regular Exceptions.

2.

  -How would you modify your code to add new types of variables (e.g., float)?
  ============================================================================
   because of our program structure we can only change/add some fields in Svar Class (which responsible of
    all of the variables in the program)

  -Below are four features your program currently does not support. Please select two of
  them, and describe which modifications/extensions you would have to make in your code
  in order to support them. Please briefly describe which classes you would add to your code,
  which methods you would add to existing classes, and which classes you would modify. You
  are not required to implement these features.
 ==========================================================================================
*UNARY AND BINARY OPERATIONS:
if our program would support unary and binary opeartions we will probably have to add another Matcher and
Pattern to SyntaxVerifier, in order to recognize every line that is similar to such action ,and if so - we
 would send all of the line parts(meaning if the line is "a * b" or "5 * 7", we will separate it so will
 get "a", "b" or "5","7" and inspect them accordingly (Which does not demands another class because we
 already have methods that handles the inspections of such strings in the code!)

*IMPORTING METHODS AND GLOBAL VARIABLES:
in such case we would probably had to create new class ("ProgramsHandler") that holds lists of Sjavac
files,and creates hierarchical order between them and handles their relationships and connects between
their imported methods and Variables.

3.In your README file, please describe two of the main regular expressions you used in your code:
================================================================================================

---------------------"(\\s*[a-zA-Z]\\w*|_\\w+)"------------------------------
this pattern is responsible of recognizing correct name of Variable format,meaning- we need to recognize
rather a certain string answer the demands of a correct name format, which is :
-starting with a letter, followed by more letters\digits.
- starting with "underline": _  and more digits\letters.

-------------------------"\\s*(return)\\s*;"---------------------------------
we used this pattern in order to recognize return statements in the code , and to decide rather they are
valid or not (demanding every method to end with a return call + making sure there are no return call in
the main scope.)


